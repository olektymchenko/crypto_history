{"version":3,"sources":["img/bitcoin-brands.svg","Header.js","Footer.js","Select.js","Chart.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Footer","href","Select","props","value","onChange","e","setCurrency","type","setDateFrom","setDateTo","onClick","getData","Chart","width","height","data","dataToCurve","margin","top","right","bottom","left","dataKey","stroke","strokeDasharray","Body","API_KEY","currency","target","setState","selectedCurrency","dateFrom","dateTo","fetch","state","then","response","json","allDayPrices","console","log","i","length","oneDayPrice","day","timestamp","split","price","rate","push","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,4C,iMCgB5BC,EAbA,WACX,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKC,IAAKC,IAAMC,IAAI,cAExB,yBAAKH,UAAU,cACX,4CCDDI,EAPA,WACX,OACI,yBAAKJ,UAAU,UACX,uBAAGK,KAAK,sBAAR,2D,oCCYGC,EAfA,SAACC,GACZ,OACI,yBAAKP,UAAU,eACX,4BAAQQ,MAAOD,EAAMC,MAAOC,SAAU,SAACC,GAAD,OAAOH,EAAMI,YAAYD,EAAG,WAC9D,4BAAQF,MAAM,OAAd,gBACA,4BAAQA,MAAM,OAAd,kBAEJ,uCACA,2BAAOI,KAAK,OAAOH,SAAU,SAACC,GAAD,OAAOH,EAAMM,YAAYH,EAAG,YACzD,qCACA,2BAAOE,KAAK,OAAOH,SAAU,SAACC,GAAD,OAAOH,EAAMO,UAAUJ,EAAG,YACvD,4BAAQK,QAASR,EAAMS,SAAvB,e,QCGGC,EAbD,SAACV,GACX,OACI,yBAAKP,UAAU,UACX,kBAAC,IAAD,CAAWkB,MAAO,IAAKC,OAAQ,IAAKC,KAAMb,EAAMc,YAAaC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,OAAQ,EAAGC,KAAM,IACvG,kBAAC,IAAD,CAAMd,KAAK,WAAWe,QAAQ,QAAQC,OAAO,YAC7C,kBAAC,IAAD,CAAeA,OAAO,OAAOC,gBAAgB,QAC7C,kBAAC,IAAD,CAAOF,QAAQ,QACf,kBAAC,IAAD,MACA,kBAAC,IAAD,SC2CDG,E,kDAjDX,aAAe,IAAD,8BACV,gBAQJC,QAAU,mCATI,EAWdpB,YAAc,SAACD,GACX,IAAIsB,EAAWtB,EAAEuB,OAAOzB,MACxB,EAAK0B,SAAS,CAAEC,iBAAkBH,KAbxB,EAednB,YAAc,SAACH,GACX,IAAI0B,EAAW1B,EAAEuB,OAAOzB,MAAQ,iBAChC,EAAK0B,SAAS,CAAEE,SAAUA,KAjBhB,EAmBdtB,UAAY,SAACJ,GACT,IAAI2B,EAAS3B,EAAEuB,OAAOzB,MAAQ,iBAC9B,EAAK0B,SAAS,CAAEG,OAAQA,KArBd,EAuBdrB,QAAU,WACNsB,MAAM,wDAAD,OAAyD,EAAKP,QAA9D,qBAAkF,EAAKQ,MAAMJ,iBAA7F,kBAAuH,EAAKI,MAAMH,SAAlI,gBAAkJ,EAAKG,MAAMF,SAC7JG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAApB,GACF,IAAIuB,EAAe,GACnBC,QAAQC,IAAIzB,GACZ,IAAK,IAAI0B,EAAI,EAAGA,EAAI1B,EAAK2B,OAAQD,IAAK,CAClC,IAAIE,EAAc,GAClBA,EAAYC,IAAM7B,EAAK0B,GAAGI,UAAUC,MAAM,KAAK,GAC/CH,EAAYI,MAAQhC,EAAK0B,GAAGO,KAAKF,MAAM,KAAK,GAC5CR,EAAaW,KAAKN,GAEtB,EAAKd,SAAS,CAAEb,YAAasB,QAjCrC,EAAKJ,MAAQ,CACTJ,iBAAkB,MAClBC,SAAU,GACVC,OAAQ,GACRhB,YAAa,IANP,E,qDAwCV,OACI,yBAAKrB,UAAU,QACX,kBAAC,EAAD,CAAQW,YAAa4C,KAAK5C,YAAaH,MAAO+C,KAAKhB,MAAMJ,iBAAkBtB,YAAa0C,KAAK1C,YAAaC,UAAWyC,KAAKzC,UAAWE,QAASuC,KAAKvC,UAClJuC,KAAKhB,MAAMlB,aAAe,kBAAC,EAAD,CAAOA,YAAakC,KAAKhB,MAAMlB,mB,GA5CvDmC,aCYJC,MAVf,WACE,OACE,yBAAKzD,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.2aaa0ba9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bitcoin-brands.182e8992.svg\";","import React from 'react';\r\nimport logo from './img/bitcoin-brands.svg';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"Header\">\r\n            <div className=\"Logo\">\r\n                <img src={logo} alt=\"App Logo\"></img>\r\n            </div>\r\n            <div className=\"HeaderText\">\r\n                <h3>CryptoApp</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"Footer\">\r\n            <a href=\"https://nomics.com\">Crypto Market Cap and Pricing Data Provided By Nomics</a>\r\n        </div>\r\n    )\r\n}\r\nexport default Footer;","import React from 'react';\r\n\r\nconst Select = (props) => {\r\n    return (\r\n        <div className=\"SelectClass\">\r\n            <select value={props.value} onChange={(e) => props.setCurrency(e, \"value\")}>\r\n                <option value=\"BTC\">BTC  Bitcoin</option>\r\n                <option value=\"ETH\">ETH  Ethereum</option>\r\n            </select>\r\n            <span>From:</span>\r\n            <input type=\"date\" onChange={(e) => props.setDateFrom(e, \"value\")}></input>\r\n            <span>To:</span>\r\n            <input type=\"date\" onChange={(e) => props.setDateTo(e, \"value\")}></input>\r\n            <button onClick={props.getData}>Get Info!</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Select;","import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\r\n\r\nconst Chart = (props) => {\r\n    return (\r\n        <div className=\"Curves\">\r\n            <LineChart width={900} height={450} data={props.dataToCurve} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n                <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" />\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <XAxis dataKey=\"day\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n            </LineChart>\r\n        </div>\r\n    )\r\n}\r\nexport default Chart;","import React, { Component } from 'react';\r\nimport Select from './Select';\r\nimport Chart from './Chart';\r\n\r\nclass Body extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            selectedCurrency: 'BTC',\r\n            dateFrom: '',\r\n            dateTo: '',\r\n            dataToCurve: []\r\n        }\r\n    }\r\n    API_KEY = \"e5716abb77f73b515b8ba46d2cb97e68\";\r\n\r\n    setCurrency = (e) => {\r\n        let currency = e.target.value;\r\n        this.setState({ selectedCurrency: currency })\r\n    }\r\n    setDateFrom = (e) => {\r\n        let dateFrom = e.target.value + \"T00%3A00%3A00Z\";\r\n        this.setState({ dateFrom: dateFrom })\r\n    }\r\n    setDateTo = (e) => {\r\n        let dateTo = e.target.value + \"T00%3A00%3A00Z\";\r\n        this.setState({ dateTo: dateTo })\r\n    }\r\n    getData = () => {\r\n        fetch(`https://api.nomics.com/v1/exchange-rates/history?key=${this.API_KEY}&currency=${this.state.selectedCurrency}&start=${this.state.dateFrom}&end=${this.state.dateTo}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let allDayPrices = [];\r\n                console.log(data);\r\n                for (let i = 0; i < data.length; i++) {\r\n                    let oneDayPrice = {};\r\n                    oneDayPrice.day = data[i].timestamp.split(\"T\")[0];\r\n                    oneDayPrice.price = data[i].rate.split(\".\")[0];\r\n                    allDayPrices.push(oneDayPrice);\r\n                }\r\n                this.setState({ dataToCurve: allDayPrices });\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Body\">\r\n                <Select setCurrency={this.setCurrency} value={this.state.selectedCurrency} setDateFrom={this.setDateFrom} setDateTo={this.setDateTo} getData={this.getData} />\r\n                {this.state.dataToCurve && <Chart dataToCurve={this.state.dataToCurve} />}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Body;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Body from './Body';\n\nfunction App() {\n  return (\n    <div className=\"BitcoinApp\">\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}